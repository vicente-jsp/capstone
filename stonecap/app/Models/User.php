<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use App\Models\Course;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role', 
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'role' => 'string', // Or use an Enum cast in Laravel 9+
    ];
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    public function isAdmin(): bool
    {
        return $this->role === 'admin';
    }

    public function isEducator(): bool
    {
        return $this->role === 'educator';
    }

    public function isStudent(): bool
    {
        return $this->role === 'student';
    }

    // --- Relationships ---

    // Courses created/managed by this user (if educator)
    public function managedCourses(): HasMany
    {
        return $this->hasMany(Course::class, 'educator_id');
    }

    // Courses this user is enrolled in (as student or potentially educator)
    public function enrolledCourses(): BelongsToMany
    {
        return $this->belongsToMany(Course::class, 'course_enrollments', 'user_id', 'course_id');
            // ->withPivot('role_in_course') // Add if using role_in_course
            // ->withTimestamps(); // If you need enrollment timestamps directly
    }

    // Submissions made by this user (if student)
    public function submissions(): HasMany
    {
        return $this->hasMany(Submission::class);
    }

    // Grades given by this user (if educator)
    public function gradedSubmissions(): HasMany
    {
         return $this->hasMany(Submission::class, 'graded_by');
    }

     // Activity logs generated by this user
     public function activityLogs(): HasMany
     {
         return $this->hasMany(ActivityLog::class);
     }

}
